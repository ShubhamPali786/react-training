{"version":3,"sources":["components/ProductPrice.tsx","components/Product.tsx","containers/ProductList.tsx"],"names":["ProductPrice","actualPrice","salePrice","code","toFixed","style","textDecoration","className","Product","stock","wishlist","onClick","props","btnClick","disabled","this","pData","ImageWithFallback","source","productImage","productName","productPrice","renderButton","productStock","React","Component","defaultProps","ProductList","state","pList","getData","Axios","get","then","res","console","log","setState","data","catch","err","Container","fullWidth","Row","map","value","Column","colSize","selectedCode","key","productId","addToCart","connect","storeData","currency","dispatch","product","cartActions"],"mappings":"sKA4BeA,EArBmC,SAAC,GAI5C,IAHLC,EAGI,EAHJA,YACAC,EAEI,EAFJA,UACAC,EACI,EADJA,KAEA,OAAIF,IAAgBC,EAEhB,4BACGC,EADH,IACUF,EAAYG,QAAQ,IAKhC,4BACGD,EADH,IACUD,EAAUE,QAAQ,GAAI,IAC9B,2BAAOC,MAAO,CAAEC,eAAgB,gBAAkBC,UAAU,cACzDJ,EADH,IACUF,EAAYG,QAAQ,MCX9BI,E,2KAISC,EAAgBC,GAAgC,IAAD,OAC1D,OAAID,EAEA,4BACEF,UAAU,mCACVI,QAAS,kBAAM,EAAKC,MAAMC,aAE1B,uBAAGN,UAAU,oBAJf,UAI6C,IAC1CG,EAAW,WAAa,QAK7B,4BAAQH,UAAU,kCAAkCO,UAAQ,GAC1D,uBAAGP,UAAU,eADf,mB,+BAKM,IAAD,EAC2BQ,KAAKH,MAA/BI,EADD,EACCA,MAAON,EADR,EACQA,SAAUP,EADlB,EACkBA,KACzB,OACE,yBAAKI,UAAU,uCACb,kBAACU,EAAA,EAAD,CAAmBC,OAAQF,EAAMG,eACjC,wBAAIZ,UAAU,QAAQS,EAAMI,aAI5B,kBAAC,EAAD,CACEjB,KAAMA,EACND,UAAWc,EAAMd,UACjBD,YAAae,EAAMK,eAGpBN,KAAKO,aAAaN,EAAMO,aAAcb,Q,GArCzBc,IAAMC,WAAtBjB,EACGkB,aAAe,CACpBhB,UAAU,GAwCCF,Q,yDCnCTmB,E,4MACJC,MAA0B,CAAEC,MAAO,I,kEAGjCd,KAAKe,Y,gCAGI,IAAD,OAGRC,IAAMC,IADJ,iGAECC,MAAK,SAACC,GACLC,QAAQC,IAAI,UAAWF,GACvB,EAAKG,SAAS,CAAER,MAAOK,EAAII,UAE5BC,OAAM,SAACC,GACNL,QAAQC,IAAI,QAASI,Q,+BAIjB,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAWC,WAAS,GAClB,kBAACC,EAAA,EAAD,KAGG5B,KAAKa,MAAMC,MAAMe,KAAI,SAACC,GAAD,OACpB,kBAACC,EAAA,EAAD,CAAQC,QAAS,GACf,kBAAC,EAAD,CACE/B,MAAO6B,EACP1C,KAAM,EAAKS,MAAMoC,aACjBC,IAAKJ,EAAMK,UACXrC,SAAU,kBAAM,EAAKD,MAAMuC,UAAUN,gB,GAhC3BrB,IAAMC,WAmDjB2B,uBATa,SAACC,GAC3B,MAAO,CAAEL,aAAcK,EAAUC,aAER,SAACC,GAC1B,MAAO,CACLJ,UAAW,SAACK,GAAD,OACTD,EAASE,IAAYN,UAAUK,QAGtBJ,CAAiDzB","file":"static/js/3.20c21329.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface ProductPriceProps {\n  actualPrice: number;\n  salePrice: number;\n  code: string;\n}\nconst ProductPrice: React.FC<ProductPriceProps> = ({\n  actualPrice,\n  salePrice,\n  code,\n}) => {\n  if (actualPrice === salePrice) {\n    return (\n      <h5>\n        {code} {actualPrice.toFixed(2)}\n      </h5>\n    );\n  }\n  return (\n    <h5>\n      {code} {salePrice.toFixed(2)}{\" \"}\n      <small style={{ textDecoration: \"line-through\" }} className=\"text-muted\">\n        {code} {actualPrice.toFixed(2)}\n      </small>\n    </h5>\n  );\n};\nexport default ProductPrice;\n","import React from \"react\";\nimport { ProductModel } from \"../models/product.model\";\nimport ImageWithFallback from \"./ImageWithFallback\";\nimport ProductPrice from \"./ProductPrice\";\n\ninterface ProductProps {\n  pData: ProductModel;\n  wishlist?: boolean;\n  code: string;\n  btnClick: () => void;\n}\n\nclass Product extends React.Component<ProductProps> {\n  static defaultProps = {\n    wishlist: false,\n  };\n  renderButton(stock: boolean, wishlist: boolean | undefined) {\n    if (stock) {\n      return (\n        <button\n          className=\"btn btn-primary btn-block btn-sm\"\n          onClick={() => this.props.btnClick()}\n        >\n          <i className=\"fab fa-opencart\"></i> Add to{\" \"}\n          {wishlist ? \"Wishlist\" : \"Cart\"}\n        </button>\n      );\n    }\n    return (\n      <button className=\"btn btn-danger btn-block btn-sm\" disabled>\n        <i className=\"fas fa-ban\"></i> Out of Stock\n      </button>\n    );\n  }\n  render() {\n    const { pData, wishlist, code } = this.props;\n    return (\n      <div className=\"shadow p-4 rounded my-3 text-center\">\n        <ImageWithFallback source={pData.productImage} />\n        <h4 className=\"mt-2\">{pData.productName}</h4>\n        {/* <h5>\n          {code} {pData.productPrice.toFixed(2)}\n        </h5> */}\n        <ProductPrice\n          code={code}\n          salePrice={pData.salePrice}\n          actualPrice={pData.productPrice}\n        />\n        {/* <button>Add To {wishlist ? \"Wishlist\" : \"Cart\"}</button> */}\n        {this.renderButton(pData.productStock, wishlist)}\n      </div>\n    );\n  }\n}\nexport default Product;\n","import React from \"react\";\nimport Product from \"../components/Product\";\nimport { ProductModel } from \"../models/product.model\";\nimport Axios from \"axios\";\nimport Row from \"../components/Row\";\nimport Container from \"../components/Container\";\nimport Column from \"../components/Column\";\nimport { connect } from \"react-redux\";\nimport { StoreModel } from \"../store/reducers\";\nimport { Dispatch } from \"redux\";\nimport { cartActions } from \"../store/actions/cart.actions\";\n\ninterface ProductListProps {\n  selectedCode: string;\n  addToCart: (p: ProductModel) => void;\n}\ninterface ProductListState {\n  pList: ProductModel[];\n}\nclass ProductList extends React.Component<ProductListProps, ProductListState> {\n  state: ProductListState = { pList: [] };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData() {\n    const url =\n      \"https://raw.githubusercontent.com/mdmoin7/Random-Products-Json-Generator/master/products.json\";\n    Axios.get(url)\n      .then((res) => {\n        console.log(\"success\", res);\n        this.setState({ pList: res.data });\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  render() {\n    return (\n      <Container fullWidth>\n        <Row>\n          {/* <Product pData={pList} /> */}\n          {/* <Product pData={pList} wishlist={true} /> */}\n          {this.state.pList.map((value) => (\n            <Column colSize={4}>\n              <Product\n                pData={value}\n                code={this.props.selectedCode}\n                key={value.productId}\n                btnClick={() => this.props.addToCart(value)}\n              />\n            </Column>\n          ))}\n        </Row>\n      </Container>\n    );\n  }\n}\n// connect(how to connect)(what to connect)\nconst mapStoreDataToProps = (storeData: StoreModel) => {\n  return { selectedCode: storeData.currency };\n};\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    addToCart: (product: ProductModel) =>\n      dispatch(cartActions.addToCart(product)),\n  };\n};\nexport default connect(mapStoreDataToProps, mapDispatchToProps)(ProductList);\n"],"sourceRoot":""}